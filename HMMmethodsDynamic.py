# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _HMMmethodsDynamic
else:
    import _HMMmethodsDynamic

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _HMMmethodsDynamic.delete_SwigPyIterator

    def value(self):
        return _HMMmethodsDynamic.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _HMMmethodsDynamic.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _HMMmethodsDynamic.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _HMMmethodsDynamic.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _HMMmethodsDynamic.SwigPyIterator_equal(self, x)

    def copy(self):
        return _HMMmethodsDynamic.SwigPyIterator_copy(self)

    def next(self):
        return _HMMmethodsDynamic.SwigPyIterator_next(self)

    def __next__(self):
        return _HMMmethodsDynamic.SwigPyIterator___next__(self)

    def previous(self):
        return _HMMmethodsDynamic.SwigPyIterator_previous(self)

    def advance(self, n):
        return _HMMmethodsDynamic.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _HMMmethodsDynamic.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _HMMmethodsDynamic.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _HMMmethodsDynamic.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _HMMmethodsDynamic.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _HMMmethodsDynamic.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _HMMmethodsDynamic.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _HMMmethodsDynamic:
_HMMmethodsDynamic.SwigPyIterator_swigregister(SwigPyIterator)

class StringVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _HMMmethodsDynamic.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _HMMmethodsDynamic.StringVector___nonzero__(self)

    def __bool__(self):
        return _HMMmethodsDynamic.StringVector___bool__(self)

    def __len__(self):
        return _HMMmethodsDynamic.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _HMMmethodsDynamic.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _HMMmethodsDynamic.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _HMMmethodsDynamic.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _HMMmethodsDynamic.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _HMMmethodsDynamic.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _HMMmethodsDynamic.StringVector___setitem__(self, *args)

    def pop(self):
        return _HMMmethodsDynamic.StringVector_pop(self)

    def append(self, x):
        return _HMMmethodsDynamic.StringVector_append(self, x)

    def empty(self):
        return _HMMmethodsDynamic.StringVector_empty(self)

    def size(self):
        return _HMMmethodsDynamic.StringVector_size(self)

    def swap(self, v):
        return _HMMmethodsDynamic.StringVector_swap(self, v)

    def begin(self):
        return _HMMmethodsDynamic.StringVector_begin(self)

    def end(self):
        return _HMMmethodsDynamic.StringVector_end(self)

    def rbegin(self):
        return _HMMmethodsDynamic.StringVector_rbegin(self)

    def rend(self):
        return _HMMmethodsDynamic.StringVector_rend(self)

    def clear(self):
        return _HMMmethodsDynamic.StringVector_clear(self)

    def get_allocator(self):
        return _HMMmethodsDynamic.StringVector_get_allocator(self)

    def pop_back(self):
        return _HMMmethodsDynamic.StringVector_pop_back(self)

    def erase(self, *args):
        return _HMMmethodsDynamic.StringVector_erase(self, *args)

    def __init__(self, *args):
        _HMMmethodsDynamic.StringVector_swiginit(self, _HMMmethodsDynamic.new_StringVector(*args))

    def push_back(self, x):
        return _HMMmethodsDynamic.StringVector_push_back(self, x)

    def front(self):
        return _HMMmethodsDynamic.StringVector_front(self)

    def back(self):
        return _HMMmethodsDynamic.StringVector_back(self)

    def assign(self, n, x):
        return _HMMmethodsDynamic.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _HMMmethodsDynamic.StringVector_resize(self, *args)

    def insert(self, *args):
        return _HMMmethodsDynamic.StringVector_insert(self, *args)

    def reserve(self, n):
        return _HMMmethodsDynamic.StringVector_reserve(self, n)

    def capacity(self):
        return _HMMmethodsDynamic.StringVector_capacity(self)
    __swig_destroy__ = _HMMmethodsDynamic.delete_StringVector

# Register StringVector in _HMMmethodsDynamic:
_HMMmethodsDynamic.StringVector_swigregister(StringVector)

class DoubleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _HMMmethodsDynamic.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _HMMmethodsDynamic.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _HMMmethodsDynamic.DoubleVector___bool__(self)

    def __len__(self):
        return _HMMmethodsDynamic.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _HMMmethodsDynamic.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _HMMmethodsDynamic.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _HMMmethodsDynamic.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _HMMmethodsDynamic.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _HMMmethodsDynamic.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _HMMmethodsDynamic.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _HMMmethodsDynamic.DoubleVector_pop(self)

    def append(self, x):
        return _HMMmethodsDynamic.DoubleVector_append(self, x)

    def empty(self):
        return _HMMmethodsDynamic.DoubleVector_empty(self)

    def size(self):
        return _HMMmethodsDynamic.DoubleVector_size(self)

    def swap(self, v):
        return _HMMmethodsDynamic.DoubleVector_swap(self, v)

    def begin(self):
        return _HMMmethodsDynamic.DoubleVector_begin(self)

    def end(self):
        return _HMMmethodsDynamic.DoubleVector_end(self)

    def rbegin(self):
        return _HMMmethodsDynamic.DoubleVector_rbegin(self)

    def rend(self):
        return _HMMmethodsDynamic.DoubleVector_rend(self)

    def clear(self):
        return _HMMmethodsDynamic.DoubleVector_clear(self)

    def get_allocator(self):
        return _HMMmethodsDynamic.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _HMMmethodsDynamic.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _HMMmethodsDynamic.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        _HMMmethodsDynamic.DoubleVector_swiginit(self, _HMMmethodsDynamic.new_DoubleVector(*args))

    def push_back(self, x):
        return _HMMmethodsDynamic.DoubleVector_push_back(self, x)

    def front(self):
        return _HMMmethodsDynamic.DoubleVector_front(self)

    def back(self):
        return _HMMmethodsDynamic.DoubleVector_back(self)

    def assign(self, n, x):
        return _HMMmethodsDynamic.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _HMMmethodsDynamic.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _HMMmethodsDynamic.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _HMMmethodsDynamic.DoubleVector_reserve(self, n)

    def capacity(self):
        return _HMMmethodsDynamic.DoubleVector_capacity(self)
    __swig_destroy__ = _HMMmethodsDynamic.delete_DoubleVector

# Register DoubleVector in _HMMmethodsDynamic:
_HMMmethodsDynamic.DoubleVector_swigregister(DoubleVector)

class RegionVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _HMMmethodsDynamic.RegionVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _HMMmethodsDynamic.RegionVector___nonzero__(self)

    def __bool__(self):
        return _HMMmethodsDynamic.RegionVector___bool__(self)

    def __len__(self):
        return _HMMmethodsDynamic.RegionVector___len__(self)

    def __getslice__(self, i, j):
        return _HMMmethodsDynamic.RegionVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _HMMmethodsDynamic.RegionVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _HMMmethodsDynamic.RegionVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _HMMmethodsDynamic.RegionVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _HMMmethodsDynamic.RegionVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _HMMmethodsDynamic.RegionVector___setitem__(self, *args)

    def pop(self):
        return _HMMmethodsDynamic.RegionVector_pop(self)

    def append(self, x):
        return _HMMmethodsDynamic.RegionVector_append(self, x)

    def empty(self):
        return _HMMmethodsDynamic.RegionVector_empty(self)

    def size(self):
        return _HMMmethodsDynamic.RegionVector_size(self)

    def swap(self, v):
        return _HMMmethodsDynamic.RegionVector_swap(self, v)

    def begin(self):
        return _HMMmethodsDynamic.RegionVector_begin(self)

    def end(self):
        return _HMMmethodsDynamic.RegionVector_end(self)

    def rbegin(self):
        return _HMMmethodsDynamic.RegionVector_rbegin(self)

    def rend(self):
        return _HMMmethodsDynamic.RegionVector_rend(self)

    def clear(self):
        return _HMMmethodsDynamic.RegionVector_clear(self)

    def get_allocator(self):
        return _HMMmethodsDynamic.RegionVector_get_allocator(self)

    def pop_back(self):
        return _HMMmethodsDynamic.RegionVector_pop_back(self)

    def erase(self, *args):
        return _HMMmethodsDynamic.RegionVector_erase(self, *args)

    def __init__(self, *args):
        _HMMmethodsDynamic.RegionVector_swiginit(self, _HMMmethodsDynamic.new_RegionVector(*args))

    def push_back(self, x):
        return _HMMmethodsDynamic.RegionVector_push_back(self, x)

    def front(self):
        return _HMMmethodsDynamic.RegionVector_front(self)

    def back(self):
        return _HMMmethodsDynamic.RegionVector_back(self)

    def assign(self, n, x):
        return _HMMmethodsDynamic.RegionVector_assign(self, n, x)

    def resize(self, *args):
        return _HMMmethodsDynamic.RegionVector_resize(self, *args)

    def insert(self, *args):
        return _HMMmethodsDynamic.RegionVector_insert(self, *args)

    def reserve(self, n):
        return _HMMmethodsDynamic.RegionVector_reserve(self, n)

    def capacity(self):
        return _HMMmethodsDynamic.RegionVector_capacity(self)
    __swig_destroy__ = _HMMmethodsDynamic.delete_RegionVector

# Register RegionVector in _HMMmethodsDynamic:
_HMMmethodsDynamic.RegionVector_swigregister(RegionVector)

class StringDoubleMap(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _HMMmethodsDynamic.StringDoubleMap_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _HMMmethodsDynamic.StringDoubleMap___nonzero__(self)

    def __bool__(self):
        return _HMMmethodsDynamic.StringDoubleMap___bool__(self)

    def __len__(self):
        return _HMMmethodsDynamic.StringDoubleMap___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _HMMmethodsDynamic.StringDoubleMap___getitem__(self, key)

    def __delitem__(self, key):
        return _HMMmethodsDynamic.StringDoubleMap___delitem__(self, key)

    def has_key(self, key):
        return _HMMmethodsDynamic.StringDoubleMap_has_key(self, key)

    def keys(self):
        return _HMMmethodsDynamic.StringDoubleMap_keys(self)

    def values(self):
        return _HMMmethodsDynamic.StringDoubleMap_values(self)

    def items(self):
        return _HMMmethodsDynamic.StringDoubleMap_items(self)

    def __contains__(self, key):
        return _HMMmethodsDynamic.StringDoubleMap___contains__(self, key)

    def key_iterator(self):
        return _HMMmethodsDynamic.StringDoubleMap_key_iterator(self)

    def value_iterator(self):
        return _HMMmethodsDynamic.StringDoubleMap_value_iterator(self)

    def __setitem__(self, *args):
        return _HMMmethodsDynamic.StringDoubleMap___setitem__(self, *args)

    def asdict(self):
        return _HMMmethodsDynamic.StringDoubleMap_asdict(self)

    def __init__(self, *args):
        _HMMmethodsDynamic.StringDoubleMap_swiginit(self, _HMMmethodsDynamic.new_StringDoubleMap(*args))

    def empty(self):
        return _HMMmethodsDynamic.StringDoubleMap_empty(self)

    def size(self):
        return _HMMmethodsDynamic.StringDoubleMap_size(self)

    def swap(self, v):
        return _HMMmethodsDynamic.StringDoubleMap_swap(self, v)

    def begin(self):
        return _HMMmethodsDynamic.StringDoubleMap_begin(self)

    def end(self):
        return _HMMmethodsDynamic.StringDoubleMap_end(self)

    def rbegin(self):
        return _HMMmethodsDynamic.StringDoubleMap_rbegin(self)

    def rend(self):
        return _HMMmethodsDynamic.StringDoubleMap_rend(self)

    def clear(self):
        return _HMMmethodsDynamic.StringDoubleMap_clear(self)

    def get_allocator(self):
        return _HMMmethodsDynamic.StringDoubleMap_get_allocator(self)

    def count(self, x):
        return _HMMmethodsDynamic.StringDoubleMap_count(self, x)

    def erase(self, *args):
        return _HMMmethodsDynamic.StringDoubleMap_erase(self, *args)

    def find(self, x):
        return _HMMmethodsDynamic.StringDoubleMap_find(self, x)

    def lower_bound(self, x):
        return _HMMmethodsDynamic.StringDoubleMap_lower_bound(self, x)

    def upper_bound(self, x):
        return _HMMmethodsDynamic.StringDoubleMap_upper_bound(self, x)
    __swig_destroy__ = _HMMmethodsDynamic.delete_StringDoubleMap

# Register StringDoubleMap in _HMMmethodsDynamic:
_HMMmethodsDynamic.StringDoubleMap_swigregister(StringDoubleMap)

class StringStringDoubleMap(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _HMMmethodsDynamic.StringStringDoubleMap_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _HMMmethodsDynamic.StringStringDoubleMap___nonzero__(self)

    def __bool__(self):
        return _HMMmethodsDynamic.StringStringDoubleMap___bool__(self)

    def __len__(self):
        return _HMMmethodsDynamic.StringStringDoubleMap___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _HMMmethodsDynamic.StringStringDoubleMap___getitem__(self, key)

    def __delitem__(self, key):
        return _HMMmethodsDynamic.StringStringDoubleMap___delitem__(self, key)

    def has_key(self, key):
        return _HMMmethodsDynamic.StringStringDoubleMap_has_key(self, key)

    def keys(self):
        return _HMMmethodsDynamic.StringStringDoubleMap_keys(self)

    def values(self):
        return _HMMmethodsDynamic.StringStringDoubleMap_values(self)

    def items(self):
        return _HMMmethodsDynamic.StringStringDoubleMap_items(self)

    def __contains__(self, key):
        return _HMMmethodsDynamic.StringStringDoubleMap___contains__(self, key)

    def key_iterator(self):
        return _HMMmethodsDynamic.StringStringDoubleMap_key_iterator(self)

    def value_iterator(self):
        return _HMMmethodsDynamic.StringStringDoubleMap_value_iterator(self)

    def __setitem__(self, *args):
        return _HMMmethodsDynamic.StringStringDoubleMap___setitem__(self, *args)

    def asdict(self):
        return _HMMmethodsDynamic.StringStringDoubleMap_asdict(self)

    def __init__(self, *args):
        _HMMmethodsDynamic.StringStringDoubleMap_swiginit(self, _HMMmethodsDynamic.new_StringStringDoubleMap(*args))

    def empty(self):
        return _HMMmethodsDynamic.StringStringDoubleMap_empty(self)

    def size(self):
        return _HMMmethodsDynamic.StringStringDoubleMap_size(self)

    def swap(self, v):
        return _HMMmethodsDynamic.StringStringDoubleMap_swap(self, v)

    def begin(self):
        return _HMMmethodsDynamic.StringStringDoubleMap_begin(self)

    def end(self):
        return _HMMmethodsDynamic.StringStringDoubleMap_end(self)

    def rbegin(self):
        return _HMMmethodsDynamic.StringStringDoubleMap_rbegin(self)

    def rend(self):
        return _HMMmethodsDynamic.StringStringDoubleMap_rend(self)

    def clear(self):
        return _HMMmethodsDynamic.StringStringDoubleMap_clear(self)

    def get_allocator(self):
        return _HMMmethodsDynamic.StringStringDoubleMap_get_allocator(self)

    def count(self, x):
        return _HMMmethodsDynamic.StringStringDoubleMap_count(self, x)

    def erase(self, *args):
        return _HMMmethodsDynamic.StringStringDoubleMap_erase(self, *args)

    def find(self, x):
        return _HMMmethodsDynamic.StringStringDoubleMap_find(self, x)

    def lower_bound(self, x):
        return _HMMmethodsDynamic.StringStringDoubleMap_lower_bound(self, x)

    def upper_bound(self, x):
        return _HMMmethodsDynamic.StringStringDoubleMap_upper_bound(self, x)
    __swig_destroy__ = _HMMmethodsDynamic.delete_StringStringDoubleMap

# Register StringStringDoubleMap in _HMMmethodsDynamic:
_HMMmethodsDynamic.StringStringDoubleMap_swigregister(StringStringDoubleMap)

class ReconocimientoResult(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    estados = property(_HMMmethodsDynamic.ReconocimientoResult_estados_get, _HMMmethodsDynamic.ReconocimientoResult_estados_set)
    probabilidades = property(_HMMmethodsDynamic.ReconocimientoResult_probabilidades_get, _HMMmethodsDynamic.ReconocimientoResult_probabilidades_set)

    def __init__(self, *args):
        _HMMmethodsDynamic.ReconocimientoResult_swiginit(self, _HMMmethodsDynamic.new_ReconocimientoResult(*args))
    __swig_destroy__ = _HMMmethodsDynamic.delete_ReconocimientoResult

# Register ReconocimientoResult in _HMMmethodsDynamic:
_HMMmethodsDynamic.ReconocimientoResult_swigregister(ReconocimientoResult)

class Region(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    inicio = property(_HMMmethodsDynamic.Region_inicio_get, _HMMmethodsDynamic.Region_inicio_set)
    fin = property(_HMMmethodsDynamic.Region_fin_get, _HMMmethodsDynamic.Region_fin_set)
    tipo = property(_HMMmethodsDynamic.Region_tipo_get, _HMMmethodsDynamic.Region_tipo_set)
    secuencia = property(_HMMmethodsDynamic.Region_secuencia_get, _HMMmethodsDynamic.Region_secuencia_set)
    longitud = property(_HMMmethodsDynamic.Region_longitud_get, _HMMmethodsDynamic.Region_longitud_set)

    def __init__(self, *args):
        _HMMmethodsDynamic.Region_swiginit(self, _HMMmethodsDynamic.new_Region(*args))
    __swig_destroy__ = _HMMmethodsDynamic.delete_Region

# Register Region in _HMMmethodsDynamic:
_HMMmethodsDynamic.Region_swigregister(Region)

class AnalysisResult(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    secuencia = property(_HMMmethodsDynamic.AnalysisResult_secuencia_get, _HMMmethodsDynamic.AnalysisResult_secuencia_set)
    estados_predichos = property(_HMMmethodsDynamic.AnalysisResult_estados_predichos_get, _HMMmethodsDynamic.AnalysisResult_estados_predichos_set)
    probabilidades_posicion = property(_HMMmethodsDynamic.AnalysisResult_probabilidades_posicion_get, _HMMmethodsDynamic.AnalysisResult_probabilidades_posicion_set)
    probabilidad_total = property(_HMMmethodsDynamic.AnalysisResult_probabilidad_total_get, _HMMmethodsDynamic.AnalysisResult_probabilidad_total_set)
    regiones_codificantes = property(_HMMmethodsDynamic.AnalysisResult_regiones_codificantes_get, _HMMmethodsDynamic.AnalysisResult_regiones_codificantes_set)
    regiones_no_codificantes = property(_HMMmethodsDynamic.AnalysisResult_regiones_no_codificantes_get, _HMMmethodsDynamic.AnalysisResult_regiones_no_codificantes_set)
    num_regiones_codificantes = property(_HMMmethodsDynamic.AnalysisResult_num_regiones_codificantes_get, _HMMmethodsDynamic.AnalysisResult_num_regiones_codificantes_set)
    num_regiones_no_codificantes = property(_HMMmethodsDynamic.AnalysisResult_num_regiones_no_codificantes_get, _HMMmethodsDynamic.AnalysisResult_num_regiones_no_codificantes_set)

    def __init__(self):
        _HMMmethodsDynamic.AnalysisResult_swiginit(self, _HMMmethodsDynamic.new_AnalysisResult())
    __swig_destroy__ = _HMMmethodsDynamic.delete_AnalysisResult

# Register AnalysisResult in _HMMmethodsDynamic:
_HMMmethodsDynamic.AnalysisResult_swigregister(AnalysisResult)

class HMM_DNA_Analyzer(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _HMMmethodsDynamic.HMM_DNA_Analyzer_swiginit(self, _HMMmethodsDynamic.new_HMM_DNA_Analyzer())

    def reconocimiento(self, sequence):
        return _HMMmethodsDynamic.HMM_DNA_Analyzer_reconocimiento(self, sequence)

    def reconocimiento_output(self, sequence, state_sequence, region_probs):
        return _HMMmethodsDynamic.HMM_DNA_Analyzer_reconocimiento_output(self, sequence, state_sequence, region_probs)

    def evaluacion(self, sequence):
        return _HMMmethodsDynamic.HMM_DNA_Analyzer_evaluacion(self, sequence)

    def analizar_regiones(self, sequence):
        return _HMMmethodsDynamic.HMM_DNA_Analyzer_analizar_regiones(self, sequence)

    def getStates(self):
        return _HMMmethodsDynamic.HMM_DNA_Analyzer_getStates(self)

    def getObservations(self):
        return _HMMmethodsDynamic.HMM_DNA_Analyzer_getObservations(self)

    def getStartProbabilities(self):
        return _HMMmethodsDynamic.HMM_DNA_Analyzer_getStartProbabilities(self)

    def getTransitionProbabilities(self):
        return _HMMmethodsDynamic.HMM_DNA_Analyzer_getTransitionProbabilities(self)

    def getEmissionProbabilities(self):
        return _HMMmethodsDynamic.HMM_DNA_Analyzer_getEmissionProbabilities(self)
    __swig_destroy__ = _HMMmethodsDynamic.delete_HMM_DNA_Analyzer

# Register HMM_DNA_Analyzer in _HMMmethodsDynamic:
_HMMmethodsDynamic.HMM_DNA_Analyzer_swigregister(HMM_DNA_Analyzer)


def reconocimiento_global(sequence):
    return _HMMmethodsDynamic.reconocimiento_global(sequence)

def reconocimiento_global_output(sequence, states, probs):
    return _HMMmethodsDynamic.reconocimiento_global_output(sequence, states, probs)

def evaluacion_global(sequence):
    return _HMMmethodsDynamic.evaluacion_global(sequence)


